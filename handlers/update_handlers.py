import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery

from parser.parser import group_par, date
from parser.lex_day import print_day

from keyboards.keyboard_creator import create_inline_kb


router = Router()

keyboard_today = create_inline_kb(2, 'menu_button', 'update_button_today')
keyboard_tomorrow = create_inline_kb(2, 'menu_button', 'update_button_tomorrow')


@router.callback_query(F.data == 'update_button_today')
async def process_button_1_press(callback: CallbackQuery):
    today = date(0)
    week_pars = group_par('421',
                             '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                             callback.from_user.username)

    try:
        if today in week_pars:
            check = print_day(today, week_pars)
            if callback.message.text not in check:
                await callback.message.edit_text(
                    text=f'`{check}`',
                    parse_mode='MarkdownV2',
                    reply_markup=callback.message.reply_markup
                )
            else:
                await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
        else:
            await callback.message.edit_text('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä —É–∂–µ –Ω–µ –±—É–¥–µ—Ç')
        await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')

    except Exception as x:
        print(f'–æ—à–∏–±–∫–∞ –≤ –≤—ã–≤–æ–¥–µ –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è :{x}')


@router.callback_query(F.data == 'update_button_tomorrow')
async def process_button_2_press(callback: CallbackQuery):
    tomorrow = 1
    request_site = group_par('421',
                             '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
                             callback.from_user.username)
    try:
        if print_day(date(tomorrow), request_site) != '–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π ü•≥':
            await callback.message.edit_text(
                text=f'`{print_day(date(tomorrow), request_site)}`',
                parse_mode='MarkdownV2',
                reply_markup=keyboard_tomorrow
            )
        else:
            await callback.message.edit_text(
                text=f'`{print_day(date(tomorrow + 1), request_site)}`',
                parse_mode='MarkdownV2',
                reply_markup=keyboard_tomorrow
            )

        await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')
    except Exception:
        await callback.answer(text='–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ')


@router.callback_query(F.data.in_(['menu_button', 'register_button', 'check_user_button']))
async def process_button_2_press(callback: CallbackQuery):
    await callback.answer(text='–ø–æ–∫–∞ —á—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ;)')


@router.callback_query(F.data == 'next_day_par')
async def process_button_2_press(callback: CallbackQuery):
    today_next = date(1)
    request_site = group_par('421',
                             '–∑–∞–ø—Ä–æ—Å –ø–∞—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è',
                             callback.from_user.username)
    await callback.message.edit_text(
        text=f'`{print_day(today_next, request_site)}`',
        parse_mode='MarkdownV2',
        reply_markup=keyboard_tomorrow
    )
